from torch.optim.swa_utils import AveragedModel, SWALR

def run_training(df, model_head="pooler", ...., swa_lr):  
    swa_start = 3
    ....
    ....  
    for fold in FOLDS:
        train_data_loader = ....
        model = MyModel(reinit_n_layers=5).to(device)
        optimizer, _ = roberta_base_AdamW_LLRD(model)
        scheduler = transformers.get_scheduler(....)
        swa_model = AveragedModel(model).to(device)
        swa_scheduler = SWALR(optimizer, swa_lr=swa_lr)
        ....
        ....
        for epoch in range(EPOCHS):
            train_losses, ... = train_fn(train_data_loader, model, optimizer, ....,
                                         swa_model, swa_scheduler, 
                                         True if swa_lr is not None and (epoch>=swa_start) else False)
            ....
            ....
    torch.optim.swa_utils.update_bn(train_data_loader, swa_model)
    ....
    ....